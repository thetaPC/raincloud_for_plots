{"version":3,"sources":["data/plots.ts","containers/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["plotsData","width","length","minimumWaterRequired","App","initiateRaincloud","a","t0","performance","now","plants","Map","isAllPlantsWatered","maximumTimeForDropToForm","sizeOfPlot","selectedPlot","console","log","createRainDrop","waterDropletLocation","has","set","get","size","t1","wait","milliseconds","Promise","res","setTimeout","rainDropTimeToForm","Math","floor","random","className","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAAaA,EACJ,CACLC,MAAO,EACPC,OAAQ,EACRC,qBAAsB,G,eC2DXC,MA3Df,WACE,IAAIC,EAAiB,uCAAG,0CAAAC,EAAA,sDAGhBC,EAAKC,YAAYC,MAInBC,EAAS,IAAIC,IACbC,GAAqB,EACnBC,EAA2B,IAM3BC,GAHAC,EAAef,GAGWC,MAAQc,EAAab,OAErDc,QAAQC,IAAI,cAjBU,UAkBdL,EAlBc,kCAuBaM,EAAeJ,EAAYD,GAvBxC,QAuBhBM,EAvBgB,OAwBfT,EAAOU,IAAID,GAGdT,EAAOW,IAAIF,EAAsBT,EAAOY,IAAIH,GAAwB,GAFpET,EAAOW,IAAIF,EAAsB,GAK/BT,EAAOa,OAAST,IAClBF,GAAqB,GA/BH,uBAkCtBI,QAAQC,IAAI,eACNO,EAAKhB,YAAYC,MACvBO,QAAQC,IAAR,oCAAyCO,EAAKjB,GAAM,IAApD,cApCsB,4CAAH,qDAuCfkB,EAAO,SAACC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAGxCR,EAAc,uCAAG,WAAOJ,EAAYD,GAAnB,eAAAP,EAAA,6DACfwB,EAAqBC,KAAKC,MAAMD,KAAKE,SAAWpB,GAA4B,EAD7D,SAEbY,EAAKK,GAFQ,cAGnBd,QAAQC,IAAI,QAHO,kBAIZc,KAAKC,MAAMD,KAAKE,SAAWnB,GAAc,GAJ7B,2CAAH,wDAQlB,OACE,qBAAKoB,UAAU,MAAf,SACE,wBAAQC,GAAG,OAAOC,QAAS/B,EAA3B,yBC5CSgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.371ad369.chunk.js","sourcesContent":["export const plotsData = {\n  plotA: {\n    width: 5,\n    length: 5,\n    minimumWaterRequired: 1,\n  },\n  plotB: {\n    width: 5,\n    length: 2,\n    minimumWaterRequired: 1,\n  },\n};\n","import React from 'react';\nimport { plotsData } from '../../data/plots';\nimport '../../styles/App/App.css';\n\nfunction App() {\n  let initiateRaincloud = async () => {\n    // TODO: Allow each plot to have different water minimum requirement per plant.\n    // Using performance instead of a setTimeout or setInterval to improve time accuracy.\n    const t0 = performance.now();\n\n    // Hashmap to keep track of how many times a specific plant was watered.\n    // Keeping track of water droplets may be useful for a future feature request.\n    let plants = new Map();\n    let isAllPlantsWatered = false;\n    const maximumTimeForDropToForm = 1000;\n\n    // TODO: Allow the farmer to select which plot he wants the rain cloud to generate over.\n    const selectedPlot = plotsData.plotA;\n    /* Using a datasource to determine his plot.\n    This would allow a farmer to select from multiple plots. */\n    const sizeOfPlot = selectedPlot.width * selectedPlot.length;\n\n    console.log('raining...');\n    while (!isAllPlantsWatered) {\n      // Randomize water drop location along with random rain drop creation rate.\n      // This mocks a rain cloud.\n      // In a perfect world, the engineers could generate the droplets within milliseconds.\n      // However, realistically the rain cloud will be limited to its build and the rate won't be perfected.\n      let waterDropletLocation = await createRainDrop(sizeOfPlot, maximumTimeForDropToForm);\n      if (!plants.has(waterDropletLocation)) {\n        plants.set(waterDropletLocation, 1);\n      } else {\n        plants.set(waterDropletLocation, plants.get(waterDropletLocation) + 1);\n      }\n      // Check if all plants have been watered.\n      if (plants.size === sizeOfPlot) {\n        isAllPlantsWatered = true;\n      }\n    }\n    console.log('all watered');\n    const t1 = performance.now();\n    console.log(`Call to doSomething took ${(t1 - t0) / 1000} seconds.`);\n  };\n\n  const wait = (milliseconds) => {\n    return new Promise(res => setTimeout(res, milliseconds))\n  };\n\n  let createRainDrop = async (sizeOfPlot, maximumTimeForDropToForm) => {\n    let rainDropTimeToForm = Math.floor(Math.random() * maximumTimeForDropToForm) + 1;\n    await wait(rainDropTimeToForm);\n    console.log('drop');\n    return Math.floor(Math.random() * sizeOfPlot) + 1;\n  };\n\n\n  return (\n    <div className=\"App\">\n      <button id=\"rain\" onClick={initiateRaincloud}>Rain Now</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}